#!/usr/local/bin/python3

import argparse
import configparser
import os
import re

from imgurpython import ImgurClient
from PIL import Image
import pyperclip

FILE_NAME='solid_image.png'

def create_image(size=None, color=None):
    if not(size and color):
        return

    img = Image.new('RGB', size, color)
    return img


def save_image(image, path):
    if path:
        path = os.path.abspath(path) + '/' + FILE_NAME
    else:
        path = os.getcwd() + '/' + FILE_NAME
    image.save(path)


def upload_to_imgur(path, to_clipboard=True, open_url=False):
    config_parser = configparser.RawConfigParser()
    config_parser.read('{0}/.solid.conf'.format(os.getenv('HOME')))
    client_id = config_parser.get('DEFAULT', 'client_id')
    client_secret = config_parser.get('DEFAULT', 'client_secret')
    
    client = ImgurClient(client_id, client_secret)
    url = client.upload_from_path('{0}/{1}'.format(path, FILE_NAME), anon=True).get('link', '404')

    if to_clipboard:
        pyperclip.copy(url)
        if open_url:
            os.system('open {0}'.format(url))
    else:
        print(url)


def remove_image(path):
    os.remove('{0}/{1}'.format(path, FILE_NAME))


def generate_image(args):
    # TODO: improve flow here
    if args.size and args.color:
        size = tuple(int(x) for x in tuple(args.size.split(',')))

        if re.match('^#.*', args.color):
            color = tuple(int(args.color[i:i+2], 16) for i in (1, 3, 4))
        else:
            color = args.color

    if not args.path:
        args.path = os.path.abspath('.')

    save_image(create_image(size, color), args.path)

    if args.imgur:
        if args.open:
            open_url = True
        upload_to_imgur(args.path, open_url=open_url)
    if args.nosave:
        remove_image(args.path)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--size', help='Size of the image in LxB', type=str)
    parser.add_argument('--path', help='Path to the file', type=str)
    parser.add_argument('--color', help='Color', type=str)
    parser.add_argument('--nosave', help='Don\'t save file locally.', action='store_true')
    parser.add_argument('--imgur', help='Upload image to imgur and return URL', action='store_true')
    parser.add_argument('--open', help='Open the uploaded imgur URL in browser', action='store_true')
    args = parser.parse_args()
    generate_image(args)

if __name__ == '__main__':
    main()

